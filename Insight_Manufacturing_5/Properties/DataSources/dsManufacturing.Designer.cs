//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Insight_Manufacturing5_net8.Properties.DataSources {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsManufacturing")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsManufacturing : global::System.Data.DataSet {
        
        private NeurodevicesDataTable tableNeurodevices;
        
        private AmplitudengainDataTable tableAmplitudengain;
        
        private Neuromodule_DatenDataTable tableNeuromodule_Daten;
        
        private Neuromodule_KalibrierdatenDataTable tableNeuromodule_Kalibrierdaten;
        
        private global::System.Data.DataRelation relationFK_Neuromodule_Kalibrierdaten_Amplitudengain;
        
        private global::System.Data.DataRelation relationFK_Neurodevices_Amplitudengain;
        
        private global::System.Data.DataRelation relationFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten;
        
        private global::System.Data.DataRelation relationFK_Neurodevices_Neuromodule_Daten;
        
        private global::System.Data.DataRelation relationFK_Neurodevices_Neuromodule_Kalibrierdaten;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public dsManufacturing() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected dsManufacturing(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Neurodevices"] != null)) {
                    base.Tables.Add(new NeurodevicesDataTable(ds.Tables["Neurodevices"]));
                }
                if ((ds.Tables["Amplitudengain"] != null)) {
                    base.Tables.Add(new AmplitudengainDataTable(ds.Tables["Amplitudengain"]));
                }
                if ((ds.Tables["Neuromodule_Daten"] != null)) {
                    base.Tables.Add(new Neuromodule_DatenDataTable(ds.Tables["Neuromodule_Daten"]));
                }
                if ((ds.Tables["Neuromodule_Kalibrierdaten"] != null)) {
                    base.Tables.Add(new Neuromodule_KalibrierdatenDataTable(ds.Tables["Neuromodule_Kalibrierdaten"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NeurodevicesDataTable Neurodevices {
            get {
                return this.tableNeurodevices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AmplitudengainDataTable Amplitudengain {
            get {
                return this.tableAmplitudengain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Neuromodule_DatenDataTable Neuromodule_Daten {
            get {
                return this.tableNeuromodule_Daten;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Neuromodule_KalibrierdatenDataTable Neuromodule_Kalibrierdaten {
            get {
                return this.tableNeuromodule_Kalibrierdaten;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            dsManufacturing cln = ((dsManufacturing)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Neurodevices"] != null)) {
                    base.Tables.Add(new NeurodevicesDataTable(ds.Tables["Neurodevices"]));
                }
                if ((ds.Tables["Amplitudengain"] != null)) {
                    base.Tables.Add(new AmplitudengainDataTable(ds.Tables["Amplitudengain"]));
                }
                if ((ds.Tables["Neuromodule_Daten"] != null)) {
                    base.Tables.Add(new Neuromodule_DatenDataTable(ds.Tables["Neuromodule_Daten"]));
                }
                if ((ds.Tables["Neuromodule_Kalibrierdaten"] != null)) {
                    base.Tables.Add(new Neuromodule_KalibrierdatenDataTable(ds.Tables["Neuromodule_Kalibrierdaten"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableNeurodevices = ((NeurodevicesDataTable)(base.Tables["Neurodevices"]));
            if ((initTable == true)) {
                if ((this.tableNeurodevices != null)) {
                    this.tableNeurodevices.InitVars();
                }
            }
            this.tableAmplitudengain = ((AmplitudengainDataTable)(base.Tables["Amplitudengain"]));
            if ((initTable == true)) {
                if ((this.tableAmplitudengain != null)) {
                    this.tableAmplitudengain.InitVars();
                }
            }
            this.tableNeuromodule_Daten = ((Neuromodule_DatenDataTable)(base.Tables["Neuromodule_Daten"]));
            if ((initTable == true)) {
                if ((this.tableNeuromodule_Daten != null)) {
                    this.tableNeuromodule_Daten.InitVars();
                }
            }
            this.tableNeuromodule_Kalibrierdaten = ((Neuromodule_KalibrierdatenDataTable)(base.Tables["Neuromodule_Kalibrierdaten"]));
            if ((initTable == true)) {
                if ((this.tableNeuromodule_Kalibrierdaten != null)) {
                    this.tableNeuromodule_Kalibrierdaten.InitVars();
                }
            }
            this.relationFK_Neuromodule_Kalibrierdaten_Amplitudengain = this.Relations["FK_Neuromodule_Kalibrierdaten_Amplitudengain"];
            this.relationFK_Neurodevices_Amplitudengain = this.Relations["FK_Neurodevices_Amplitudengain"];
            this.relationFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten = this.Relations["FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten"];
            this.relationFK_Neurodevices_Neuromodule_Daten = this.Relations["FK_Neurodevices_Neuromodule_Daten"];
            this.relationFK_Neurodevices_Neuromodule_Kalibrierdaten = this.Relations["FK_Neurodevices_Neuromodule_Kalibrierdaten"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "dsManufacturing";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsManufacturing.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNeurodevices = new NeurodevicesDataTable();
            base.Tables.Add(this.tableNeurodevices);
            this.tableAmplitudengain = new AmplitudengainDataTable();
            base.Tables.Add(this.tableAmplitudengain);
            this.tableNeuromodule_Daten = new Neuromodule_DatenDataTable();
            base.Tables.Add(this.tableNeuromodule_Daten);
            this.tableNeuromodule_Kalibrierdaten = new Neuromodule_KalibrierdatenDataTable();
            base.Tables.Add(this.tableNeuromodule_Kalibrierdaten);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Neuromodule_Kalibrierdaten_Amplitudengain", new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn}, new global::System.Data.DataColumn[] {
                        this.tableAmplitudengain.id_amplitudengainColumn});
            this.tableAmplitudengain.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Neurodevices_Amplitudengain", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableAmplitudengain.SerialNumberColumn});
            this.tableAmplitudengain.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten", new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn});
            this.tableNeuromodule_Daten.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Neurodevices_Neuromodule_Daten", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Daten.SerialNumberColumn});
            this.tableNeuromodule_Daten.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Neurodevices_Neuromodule_Kalibrierdaten", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.SerialNumberColumn});
            this.tableNeuromodule_Kalibrierdaten.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Neuromodule_Kalibrierdaten_Amplitudengain = new global::System.Data.DataRelation("FK_Neuromodule_Kalibrierdaten_Amplitudengain", new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn}, new global::System.Data.DataColumn[] {
                        this.tableAmplitudengain.id_amplitudengainColumn}, false);
            this.Relations.Add(this.relationFK_Neuromodule_Kalibrierdaten_Amplitudengain);
            this.relationFK_Neurodevices_Amplitudengain = new global::System.Data.DataRelation("FK_Neurodevices_Amplitudengain", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableAmplitudengain.SerialNumberColumn}, false);
            this.Relations.Add(this.relationFK_Neurodevices_Amplitudengain);
            this.relationFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten = new global::System.Data.DataRelation("FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten", new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn}, false);
            this.Relations.Add(this.relationFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten);
            this.relationFK_Neurodevices_Neuromodule_Daten = new global::System.Data.DataRelation("FK_Neurodevices_Neuromodule_Daten", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Daten.SerialNumberColumn}, false);
            this.Relations.Add(this.relationFK_Neurodevices_Neuromodule_Daten);
            this.relationFK_Neurodevices_Neuromodule_Kalibrierdaten = new global::System.Data.DataRelation("FK_Neurodevices_Neuromodule_Kalibrierdaten", new global::System.Data.DataColumn[] {
                        this.tableNeurodevices.SerialNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableNeuromodule_Kalibrierdaten.SerialNumberColumn}, false);
            this.Relations.Add(this.relationFK_Neurodevices_Neuromodule_Kalibrierdaten);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeNeurodevices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAmplitudengain() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeNeuromodule_Daten() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeNeuromodule_Kalibrierdaten() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsManufacturing ds = new dsManufacturing();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void NeurodevicesRowChangeEventHandler(object sender, NeurodevicesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AmplitudengainRowChangeEventHandler(object sender, AmplitudengainRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Neuromodule_DatenRowChangeEventHandler(object sender, Neuromodule_DatenRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Neuromodule_KalibrierdatenRowChangeEventHandler(object sender, Neuromodule_KalibrierdatenRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NeurodevicesDataTable : global::System.Data.TypedTableBase<NeurodevicesRow> {
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnTyp;
            
            private global::System.Data.DataColumn columnProgrammierdatum;
            
            private global::System.Data.DataColumn columnTestdatum;
            
            private global::System.Data.DataColumn columnTestOK;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnHex_File_geflashed;
            
            private global::System.Data.DataColumn columnTest_Kabel;
            
            private global::System.Data.DataColumn columnTest_Funk;
            
            private global::System.Data.DataColumn columnTest_Details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesDataTable() {
                this.TableName = "Neurodevices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal NeurodevicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected NeurodevicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TypColumn {
                get {
                    return this.columnTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProgrammierdatumColumn {
                get {
                    return this.columnProgrammierdatum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TestdatumColumn {
                get {
                    return this.columnTestdatum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TestOKColumn {
                get {
                    return this.columnTestOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Hex_File_geflashedColumn {
                get {
                    return this.columnHex_File_geflashed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Test_KabelColumn {
                get {
                    return this.columnTest_Kabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Test_FunkColumn {
                get {
                    return this.columnTest_Funk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Test_DetailsColumn {
                get {
                    return this.columnTest_Details;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow this[int index] {
                get {
                    return ((NeurodevicesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NeurodevicesRowChangeEventHandler NeurodevicesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NeurodevicesRowChangeEventHandler NeurodevicesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NeurodevicesRowChangeEventHandler NeurodevicesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NeurodevicesRowChangeEventHandler NeurodevicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddNeurodevicesRow(NeurodevicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow AddNeurodevicesRow(string SerialNumber, string Typ, System.DateTime Programmierdatum, System.DateTime Testdatum, string TestOK, string Version, string Hex_File_geflashed, bool Test_Kabel, bool Test_Funk, string Test_Details) {
                NeurodevicesRow rowNeurodevicesRow = ((NeurodevicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SerialNumber,
                        Typ,
                        Programmierdatum,
                        Testdatum,
                        TestOK,
                        Version,
                        Hex_File_geflashed,
                        Test_Kabel,
                        Test_Funk,
                        Test_Details};
                rowNeurodevicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNeurodevicesRow);
                return rowNeurodevicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NeurodevicesDataTable cln = ((NeurodevicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NeurodevicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnTyp = base.Columns["Typ"];
                this.columnProgrammierdatum = base.Columns["Programmierdatum"];
                this.columnTestdatum = base.Columns["Testdatum"];
                this.columnTestOK = base.Columns["TestOK"];
                this.columnVersion = base.Columns["Version"];
                this.columnHex_File_geflashed = base.Columns["Hex_File_geflashed"];
                this.columnTest_Kabel = base.Columns["Test_Kabel"];
                this.columnTest_Funk = base.Columns["Test_Funk"];
                this.columnTest_Details = base.Columns["Test_Details"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnTyp = new global::System.Data.DataColumn("Typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTyp);
                this.columnProgrammierdatum = new global::System.Data.DataColumn("Programmierdatum", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgrammierdatum);
                this.columnTestdatum = new global::System.Data.DataColumn("Testdatum", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestdatum);
                this.columnTestOK = new global::System.Data.DataColumn("TestOK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestOK);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnHex_File_geflashed = new global::System.Data.DataColumn("Hex_File_geflashed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHex_File_geflashed);
                this.columnTest_Kabel = new global::System.Data.DataColumn("Test_Kabel", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTest_Kabel);
                this.columnTest_Funk = new global::System.Data.DataColumn("Test_Funk", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTest_Funk);
                this.columnTest_Details = new global::System.Data.DataColumn("Test_Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTest_Details);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSerialNumber}, false));
                this.columnSerialNumber.AllowDBNull = false;
                this.columnSerialNumber.Unique = true;
                this.columnSerialNumber.MaxLength = 255;
                this.columnTyp.MaxLength = 255;
                this.columnTestOK.MaxLength = 255;
                this.columnVersion.MaxLength = 255;
                this.columnHex_File_geflashed.MaxLength = 255;
                this.columnTest_Kabel.AllowDBNull = false;
                this.columnTest_Funk.AllowDBNull = false;
                this.columnTest_Details.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow NewNeurodevicesRow() {
                return ((NeurodevicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NeurodevicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NeurodevicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NeurodevicesRowChanged != null)) {
                    this.NeurodevicesRowChanged(this, new NeurodevicesRowChangeEvent(((NeurodevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NeurodevicesRowChanging != null)) {
                    this.NeurodevicesRowChanging(this, new NeurodevicesRowChangeEvent(((NeurodevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NeurodevicesRowDeleted != null)) {
                    this.NeurodevicesRowDeleted(this, new NeurodevicesRowChangeEvent(((NeurodevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NeurodevicesRowDeleting != null)) {
                    this.NeurodevicesRowDeleting(this, new NeurodevicesRowChangeEvent(((NeurodevicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveNeurodevicesRow(NeurodevicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsManufacturing ds = new dsManufacturing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NeurodevicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AmplitudengainDataTable : global::System.Data.TypedTableBase<AmplitudengainRow> {
            
            private global::System.Data.DataColumn columnid_amplitudengain;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnid_neuromodule_kalibrierdaten;
            
            private global::System.Data.DataColumn columnf;
            
            private global::System.Data.DataColumn columnUineff;
            
            private global::System.Data.DataColumn columnU0eff;
            
            private global::System.Data.DataColumn columnv0ist;
            
            private global::System.Data.DataColumn columnv0soll;
            
            private global::System.Data.DataColumn columnTolerance;
            
            private global::System.Data.DataColumn columnIsOK;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainDataTable() {
                this.TableName = "Amplitudengain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AmplitudengainDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected AmplitudengainDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn id_amplitudengainColumn {
                get {
                    return this.columnid_amplitudengain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn id_neuromodule_kalibrierdatenColumn {
                get {
                    return this.columnid_neuromodule_kalibrierdaten;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn fColumn {
                get {
                    return this.columnf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn UineffColumn {
                get {
                    return this.columnUineff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn U0effColumn {
                get {
                    return this.columnU0eff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn v0istColumn {
                get {
                    return this.columnv0ist;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn v0sollColumn {
                get {
                    return this.columnv0soll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ToleranceColumn {
                get {
                    return this.columnTolerance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IsOKColumn {
                get {
                    return this.columnIsOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow this[int index] {
                get {
                    return ((AmplitudengainRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AmplitudengainRowChangeEventHandler AmplitudengainRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AmplitudengainRowChangeEventHandler AmplitudengainRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AmplitudengainRowChangeEventHandler AmplitudengainRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AmplitudengainRowChangeEventHandler AmplitudengainRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAmplitudengainRow(AmplitudengainRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow AddAmplitudengainRow(Neuromodule_KalibrierdatenRow parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Amplitudengain, NeurodevicesRow parentNeurodevicesRowByFK_Neurodevices_Amplitudengain, System.Guid id_neuromodule_kalibrierdaten, double f, double Uineff, double U0eff, double v0ist, double v0soll, double Tolerance, bool IsOK, string Comment) {
                AmplitudengainRow rowAmplitudengainRow = ((AmplitudengainRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        id_neuromodule_kalibrierdaten,
                        f,
                        Uineff,
                        U0eff,
                        v0ist,
                        v0soll,
                        Tolerance,
                        IsOK,
                        Comment};
                if ((parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Amplitudengain != null)) {
                    columnValuesArray[0] = parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Amplitudengain[0];
                }
                if ((parentNeurodevicesRowByFK_Neurodevices_Amplitudengain != null)) {
                    columnValuesArray[1] = parentNeurodevicesRowByFK_Neurodevices_Amplitudengain[0];
                }
                rowAmplitudengainRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAmplitudengainRow);
                return rowAmplitudengainRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AmplitudengainDataTable cln = ((AmplitudengainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AmplitudengainDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid_amplitudengain = base.Columns["id_amplitudengain"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnid_neuromodule_kalibrierdaten = base.Columns["id_neuromodule_kalibrierdaten"];
                this.columnf = base.Columns["f"];
                this.columnUineff = base.Columns["Uineff"];
                this.columnU0eff = base.Columns["U0eff"];
                this.columnv0ist = base.Columns["v0ist"];
                this.columnv0soll = base.Columns["v0soll"];
                this.columnTolerance = base.Columns["Tolerance"];
                this.columnIsOK = base.Columns["IsOK"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid_amplitudengain = new global::System.Data.DataColumn("id_amplitudengain", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_amplitudengain);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnid_neuromodule_kalibrierdaten = new global::System.Data.DataColumn("id_neuromodule_kalibrierdaten", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_neuromodule_kalibrierdaten);
                this.columnf = new global::System.Data.DataColumn("f", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf);
                this.columnUineff = new global::System.Data.DataColumn("Uineff", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUineff);
                this.columnU0eff = new global::System.Data.DataColumn("U0eff", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnU0eff);
                this.columnv0ist = new global::System.Data.DataColumn("v0ist", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnv0ist);
                this.columnv0soll = new global::System.Data.DataColumn("v0soll", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnv0soll);
                this.columnTolerance = new global::System.Data.DataColumn("Tolerance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTolerance);
                this.columnIsOK = new global::System.Data.DataColumn("IsOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOK);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnid_amplitudengain.AllowDBNull = false;
                this.columnSerialNumber.AllowDBNull = false;
                this.columnSerialNumber.MaxLength = 255;
                this.columnIsOK.AllowDBNull = false;
                this.columnComment.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow NewAmplitudengainRow() {
                return ((AmplitudengainRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AmplitudengainRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AmplitudengainRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AmplitudengainRowChanged != null)) {
                    this.AmplitudengainRowChanged(this, new AmplitudengainRowChangeEvent(((AmplitudengainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AmplitudengainRowChanging != null)) {
                    this.AmplitudengainRowChanging(this, new AmplitudengainRowChangeEvent(((AmplitudengainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AmplitudengainRowDeleted != null)) {
                    this.AmplitudengainRowDeleted(this, new AmplitudengainRowChangeEvent(((AmplitudengainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AmplitudengainRowDeleting != null)) {
                    this.AmplitudengainRowDeleting(this, new AmplitudengainRowChangeEvent(((AmplitudengainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAmplitudengainRow(AmplitudengainRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsManufacturing ds = new dsManufacturing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AmplitudengainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Neuromodule_DatenDataTable : global::System.Data.TypedTableBase<Neuromodule_DatenRow> {
            
            private global::System.Data.DataColumn columnid_neuromodule_daten;
            
            private global::System.Data.DataColumn columnid_neuromodule_kalibrierdaten;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnTestdatum;
            
            private global::System.Data.DataColumn columnUeffin_V;
            
            private global::System.Data.DataColumn columnUoffin_V;
            
            private global::System.Data.DataColumn columnUeffout_V;
            
            private global::System.Data.DataColumn columnUmeanout_V;
            
            private global::System.Data.DataColumn columnUglmittelwert_V;
            
            private global::System.Data.DataColumn columnf;
            
            private global::System.Data.DataColumn columnSCL1;
            
            private global::System.Data.DataColumn columnSCL2;
            
            private global::System.Data.DataColumn columnSCL3;
            
            private global::System.Data.DataColumn columnTemp1;
            
            private global::System.Data.DataColumn columnTemp2;
            
            private global::System.Data.DataColumn columnTemp3;
            
            private global::System.Data.DataColumn columnTemp3ref;
            
            private global::System.Data.DataColumn columnMulti_Pulsfrequenz;
            
            private global::System.Data.DataColumn columnEEGTheta_V2;
            
            private global::System.Data.DataColumn columnEEGAlpha_V2;
            
            private global::System.Data.DataColumn columnEEGBeta_V2;
            
            private global::System.Data.DataColumn columnAtemfrequenz;
            
            private global::System.Data.DataColumn columnEMG_GleitenderMW;
            
            private global::System.Data.DataColumn columnBemerkung;
            
            private global::System.Data.DataColumn columnECG_BPM;
            
            private global::System.Data.DataColumn columnECG_Lib_File_Name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenDataTable() {
                this.TableName = "Neuromodule_Daten";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Neuromodule_DatenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Neuromodule_DatenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn id_neuromodule_datenColumn {
                get {
                    return this.columnid_neuromodule_daten;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn id_neuromodule_kalibrierdatenColumn {
                get {
                    return this.columnid_neuromodule_kalibrierdaten;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TestdatumColumn {
                get {
                    return this.columnTestdatum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Ueffin_VColumn {
                get {
                    return this.columnUeffin_V;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Uoffin_VColumn {
                get {
                    return this.columnUoffin_V;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Ueffout_VColumn {
                get {
                    return this.columnUeffout_V;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Umeanout_VColumn {
                get {
                    return this.columnUmeanout_V;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Uglmittelwert_VColumn {
                get {
                    return this.columnUglmittelwert_V;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn fColumn {
                get {
                    return this.columnf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SCL1Column {
                get {
                    return this.columnSCL1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SCL2Column {
                get {
                    return this.columnSCL2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SCL3Column {
                get {
                    return this.columnSCL3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Temp1Column {
                get {
                    return this.columnTemp1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Temp2Column {
                get {
                    return this.columnTemp2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Temp3Column {
                get {
                    return this.columnTemp3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Temp3refColumn {
                get {
                    return this.columnTemp3ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Multi_PulsfrequenzColumn {
                get {
                    return this.columnMulti_Pulsfrequenz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EEGTheta_V2Column {
                get {
                    return this.columnEEGTheta_V2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EEGAlpha_V2Column {
                get {
                    return this.columnEEGAlpha_V2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EEGBeta_V2Column {
                get {
                    return this.columnEEGBeta_V2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AtemfrequenzColumn {
                get {
                    return this.columnAtemfrequenz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EMG_GleitenderMWColumn {
                get {
                    return this.columnEMG_GleitenderMW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BemerkungColumn {
                get {
                    return this.columnBemerkung;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ECG_BPMColumn {
                get {
                    return this.columnECG_BPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ECG_Lib_File_NameColumn {
                get {
                    return this.columnECG_Lib_File_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow this[int index] {
                get {
                    return ((Neuromodule_DatenRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_DatenRowChangeEventHandler Neuromodule_DatenRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_DatenRowChangeEventHandler Neuromodule_DatenRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_DatenRowChangeEventHandler Neuromodule_DatenRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_DatenRowChangeEventHandler Neuromodule_DatenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddNeuromodule_DatenRow(Neuromodule_DatenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow AddNeuromodule_DatenRow(
                        System.Guid id_neuromodule_daten, 
                        Neuromodule_KalibrierdatenRow parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten, 
                        NeurodevicesRow parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Daten, 
                        System.DateTime Testdatum, 
                        double Ueffin_V, 
                        double Uoffin_V, 
                        double Ueffout_V, 
                        double Umeanout_V, 
                        double Uglmittelwert_V, 
                        double f, 
                        double SCL1, 
                        double SCL2, 
                        double SCL3, 
                        double Temp1, 
                        double Temp2, 
                        double Temp3, 
                        double Temp3ref, 
                        double Multi_Pulsfrequenz, 
                        double EEGTheta_V2, 
                        double EEGAlpha_V2, 
                        double EEGBeta_V2, 
                        double Atemfrequenz, 
                        double EMG_GleitenderMW, 
                        string Bemerkung, 
                        double ECG_BPM, 
                        string ECG_Lib_File_Name) {
                Neuromodule_DatenRow rowNeuromodule_DatenRow = ((Neuromodule_DatenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id_neuromodule_daten,
                        null,
                        null,
                        Testdatum,
                        Ueffin_V,
                        Uoffin_V,
                        Ueffout_V,
                        Umeanout_V,
                        Uglmittelwert_V,
                        f,
                        SCL1,
                        SCL2,
                        SCL3,
                        Temp1,
                        Temp2,
                        Temp3,
                        Temp3ref,
                        Multi_Pulsfrequenz,
                        EEGTheta_V2,
                        EEGAlpha_V2,
                        EEGBeta_V2,
                        Atemfrequenz,
                        EMG_GleitenderMW,
                        Bemerkung,
                        ECG_BPM,
                        ECG_Lib_File_Name};
                if ((parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten != null)) {
                    columnValuesArray[1] = parentNeuromodule_KalibrierdatenRowByFK_Neuromodule_Kalibrierdaten_Neuromodule_Daten[0];
                }
                if ((parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Daten != null)) {
                    columnValuesArray[2] = parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Daten[0];
                }
                rowNeuromodule_DatenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNeuromodule_DatenRow);
                return rowNeuromodule_DatenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Neuromodule_DatenDataTable cln = ((Neuromodule_DatenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Neuromodule_DatenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid_neuromodule_daten = base.Columns["id_neuromodule_daten"];
                this.columnid_neuromodule_kalibrierdaten = base.Columns["id_neuromodule_kalibrierdaten"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnTestdatum = base.Columns["Testdatum"];
                this.columnUeffin_V = base.Columns["Ueffin_V"];
                this.columnUoffin_V = base.Columns["Uoffin_V"];
                this.columnUeffout_V = base.Columns["Ueffout_V"];
                this.columnUmeanout_V = base.Columns["Umeanout_V"];
                this.columnUglmittelwert_V = base.Columns["Uglmittelwert_V"];
                this.columnf = base.Columns["f"];
                this.columnSCL1 = base.Columns["SCL1"];
                this.columnSCL2 = base.Columns["SCL2"];
                this.columnSCL3 = base.Columns["SCL3"];
                this.columnTemp1 = base.Columns["Temp1"];
                this.columnTemp2 = base.Columns["Temp2"];
                this.columnTemp3 = base.Columns["Temp3"];
                this.columnTemp3ref = base.Columns["Temp3ref"];
                this.columnMulti_Pulsfrequenz = base.Columns["Multi_Pulsfrequenz"];
                this.columnEEGTheta_V2 = base.Columns["EEGTheta_V2"];
                this.columnEEGAlpha_V2 = base.Columns["EEGAlpha_V2"];
                this.columnEEGBeta_V2 = base.Columns["EEGBeta_V2"];
                this.columnAtemfrequenz = base.Columns["Atemfrequenz"];
                this.columnEMG_GleitenderMW = base.Columns["EMG_GleitenderMW"];
                this.columnBemerkung = base.Columns["Bemerkung"];
                this.columnECG_BPM = base.Columns["ECG_BPM"];
                this.columnECG_Lib_File_Name = base.Columns["ECG_Lib_File_Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid_neuromodule_daten = new global::System.Data.DataColumn("id_neuromodule_daten", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_neuromodule_daten);
                this.columnid_neuromodule_kalibrierdaten = new global::System.Data.DataColumn("id_neuromodule_kalibrierdaten", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_neuromodule_kalibrierdaten);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnTestdatum = new global::System.Data.DataColumn("Testdatum", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestdatum);
                this.columnUeffin_V = new global::System.Data.DataColumn("Ueffin_V", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUeffin_V);
                this.columnUoffin_V = new global::System.Data.DataColumn("Uoffin_V", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUoffin_V);
                this.columnUeffout_V = new global::System.Data.DataColumn("Ueffout_V", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUeffout_V);
                this.columnUmeanout_V = new global::System.Data.DataColumn("Umeanout_V", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUmeanout_V);
                this.columnUglmittelwert_V = new global::System.Data.DataColumn("Uglmittelwert_V", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUglmittelwert_V);
                this.columnf = new global::System.Data.DataColumn("f", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf);
                this.columnSCL1 = new global::System.Data.DataColumn("SCL1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCL1);
                this.columnSCL2 = new global::System.Data.DataColumn("SCL2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCL2);
                this.columnSCL3 = new global::System.Data.DataColumn("SCL3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCL3);
                this.columnTemp1 = new global::System.Data.DataColumn("Temp1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp1);
                this.columnTemp2 = new global::System.Data.DataColumn("Temp2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp2);
                this.columnTemp3 = new global::System.Data.DataColumn("Temp3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp3);
                this.columnTemp3ref = new global::System.Data.DataColumn("Temp3ref", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp3ref);
                this.columnMulti_Pulsfrequenz = new global::System.Data.DataColumn("Multi_Pulsfrequenz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti_Pulsfrequenz);
                this.columnEEGTheta_V2 = new global::System.Data.DataColumn("EEGTheta_V2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEEGTheta_V2);
                this.columnEEGAlpha_V2 = new global::System.Data.DataColumn("EEGAlpha_V2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEEGAlpha_V2);
                this.columnEEGBeta_V2 = new global::System.Data.DataColumn("EEGBeta_V2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEEGBeta_V2);
                this.columnAtemfrequenz = new global::System.Data.DataColumn("Atemfrequenz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAtemfrequenz);
                this.columnEMG_GleitenderMW = new global::System.Data.DataColumn("EMG_GleitenderMW", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMG_GleitenderMW);
                this.columnBemerkung = new global::System.Data.DataColumn("Bemerkung", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBemerkung);
                this.columnECG_BPM = new global::System.Data.DataColumn("ECG_BPM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECG_BPM);
                this.columnECG_Lib_File_Name = new global::System.Data.DataColumn("ECG_Lib_File_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECG_Lib_File_Name);
                this.columnid_neuromodule_daten.AllowDBNull = false;
                this.columnSerialNumber.AllowDBNull = false;
                this.columnSerialNumber.MaxLength = 255;
                this.columnBemerkung.MaxLength = 255;
                this.columnECG_Lib_File_Name.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow NewNeuromodule_DatenRow() {
                return ((Neuromodule_DatenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Neuromodule_DatenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Neuromodule_DatenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Neuromodule_DatenRowChanged != null)) {
                    this.Neuromodule_DatenRowChanged(this, new Neuromodule_DatenRowChangeEvent(((Neuromodule_DatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Neuromodule_DatenRowChanging != null)) {
                    this.Neuromodule_DatenRowChanging(this, new Neuromodule_DatenRowChangeEvent(((Neuromodule_DatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Neuromodule_DatenRowDeleted != null)) {
                    this.Neuromodule_DatenRowDeleted(this, new Neuromodule_DatenRowChangeEvent(((Neuromodule_DatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Neuromodule_DatenRowDeleting != null)) {
                    this.Neuromodule_DatenRowDeleting(this, new Neuromodule_DatenRowChangeEvent(((Neuromodule_DatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveNeuromodule_DatenRow(Neuromodule_DatenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsManufacturing ds = new dsManufacturing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Neuromodule_DatenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Neuromodule_KalibrierdatenDataTable : global::System.Data.TypedTableBase<Neuromodule_KalibrierdatenRow> {
            
            private global::System.Data.DataColumn columnid_neuromodule_kalibrierdaten;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnADResolution;
            
            private global::System.Data.DataColumn columnuref;
            
            private global::System.Data.DataColumn columnOffset_hex_0;
            
            private global::System.Data.DataColumn columnSkalValue_k_0;
            
            private global::System.Data.DataColumn columnMidofRange_0;
            
            private global::System.Data.DataColumn columnOffset_d_0;
            
            private global::System.Data.DataColumn columnOffset_hex_1;
            
            private global::System.Data.DataColumn columnSkalValue_k_1;
            
            private global::System.Data.DataColumn columnMidofRange_1;
            
            private global::System.Data.DataColumn columnOffset_d_1;
            
            private global::System.Data.DataColumn columnOffset_hex_2;
            
            private global::System.Data.DataColumn columnSkalValue_k_2;
            
            private global::System.Data.DataColumn columnMidofRange_2;
            
            private global::System.Data.DataColumn columnOffset_d_2;
            
            private global::System.Data.DataColumn columnOffset_hex_3;
            
            private global::System.Data.DataColumn columnSkalValue_k_3;
            
            private global::System.Data.DataColumn columnMidofRange_3;
            
            private global::System.Data.DataColumn columnOffset_d_3;
            
            private global::System.Data.DataColumn columnBemerkung;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenDataTable() {
                this.TableName = "Neuromodule_Kalibrierdaten";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Neuromodule_KalibrierdatenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Neuromodule_KalibrierdatenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn id_neuromodule_kalibrierdatenColumn {
                get {
                    return this.columnid_neuromodule_kalibrierdaten;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ADResolutionColumn {
                get {
                    return this.columnADResolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn urefColumn {
                get {
                    return this.columnuref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_hex_0Column {
                get {
                    return this.columnOffset_hex_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SkalValue_k_0Column {
                get {
                    return this.columnSkalValue_k_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MidofRange_0Column {
                get {
                    return this.columnMidofRange_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_d_0Column {
                get {
                    return this.columnOffset_d_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_hex_1Column {
                get {
                    return this.columnOffset_hex_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SkalValue_k_1Column {
                get {
                    return this.columnSkalValue_k_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MidofRange_1Column {
                get {
                    return this.columnMidofRange_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_d_1Column {
                get {
                    return this.columnOffset_d_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_hex_2Column {
                get {
                    return this.columnOffset_hex_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SkalValue_k_2Column {
                get {
                    return this.columnSkalValue_k_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MidofRange_2Column {
                get {
                    return this.columnMidofRange_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_d_2Column {
                get {
                    return this.columnOffset_d_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_hex_3Column {
                get {
                    return this.columnOffset_hex_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SkalValue_k_3Column {
                get {
                    return this.columnSkalValue_k_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MidofRange_3Column {
                get {
                    return this.columnMidofRange_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Offset_d_3Column {
                get {
                    return this.columnOffset_d_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BemerkungColumn {
                get {
                    return this.columnBemerkung;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow this[int index] {
                get {
                    return ((Neuromodule_KalibrierdatenRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_KalibrierdatenRowChangeEventHandler Neuromodule_KalibrierdatenRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_KalibrierdatenRowChangeEventHandler Neuromodule_KalibrierdatenRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_KalibrierdatenRowChangeEventHandler Neuromodule_KalibrierdatenRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Neuromodule_KalibrierdatenRowChangeEventHandler Neuromodule_KalibrierdatenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddNeuromodule_KalibrierdatenRow(Neuromodule_KalibrierdatenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow AddNeuromodule_KalibrierdatenRow(
                        System.Guid id_neuromodule_kalibrierdaten, 
                        NeurodevicesRow parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Kalibrierdaten, 
                        short ADResolution, 
                        double uref, 
                        short Offset_hex_0, 
                        double SkalValue_k_0, 
                        short MidofRange_0, 
                        double Offset_d_0, 
                        short Offset_hex_1, 
                        double SkalValue_k_1, 
                        short MidofRange_1, 
                        double Offset_d_1, 
                        short Offset_hex_2, 
                        double SkalValue_k_2, 
                        short MidofRange_2, 
                        double Offset_d_2, 
                        short Offset_hex_3, 
                        double SkalValue_k_3, 
                        short MidofRange_3, 
                        double Offset_d_3, 
                        string Bemerkung) {
                Neuromodule_KalibrierdatenRow rowNeuromodule_KalibrierdatenRow = ((Neuromodule_KalibrierdatenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id_neuromodule_kalibrierdaten,
                        null,
                        ADResolution,
                        uref,
                        Offset_hex_0,
                        SkalValue_k_0,
                        MidofRange_0,
                        Offset_d_0,
                        Offset_hex_1,
                        SkalValue_k_1,
                        MidofRange_1,
                        Offset_d_1,
                        Offset_hex_2,
                        SkalValue_k_2,
                        MidofRange_2,
                        Offset_d_2,
                        Offset_hex_3,
                        SkalValue_k_3,
                        MidofRange_3,
                        Offset_d_3,
                        Bemerkung};
                if ((parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Kalibrierdaten != null)) {
                    columnValuesArray[1] = parentNeurodevicesRowByFK_Neurodevices_Neuromodule_Kalibrierdaten[0];
                }
                rowNeuromodule_KalibrierdatenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNeuromodule_KalibrierdatenRow);
                return rowNeuromodule_KalibrierdatenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Neuromodule_KalibrierdatenDataTable cln = ((Neuromodule_KalibrierdatenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Neuromodule_KalibrierdatenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid_neuromodule_kalibrierdaten = base.Columns["id_neuromodule_kalibrierdaten"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnADResolution = base.Columns["ADResolution"];
                this.columnuref = base.Columns["uref"];
                this.columnOffset_hex_0 = base.Columns["Offset_hex_0"];
                this.columnSkalValue_k_0 = base.Columns["SkalValue_k_0"];
                this.columnMidofRange_0 = base.Columns["MidofRange_0"];
                this.columnOffset_d_0 = base.Columns["Offset_d_0"];
                this.columnOffset_hex_1 = base.Columns["Offset_hex_1"];
                this.columnSkalValue_k_1 = base.Columns["SkalValue_k_1"];
                this.columnMidofRange_1 = base.Columns["MidofRange_1"];
                this.columnOffset_d_1 = base.Columns["Offset_d_1"];
                this.columnOffset_hex_2 = base.Columns["Offset_hex_2"];
                this.columnSkalValue_k_2 = base.Columns["SkalValue_k_2"];
                this.columnMidofRange_2 = base.Columns["MidofRange_2"];
                this.columnOffset_d_2 = base.Columns["Offset_d_2"];
                this.columnOffset_hex_3 = base.Columns["Offset_hex_3"];
                this.columnSkalValue_k_3 = base.Columns["SkalValue_k_3"];
                this.columnMidofRange_3 = base.Columns["MidofRange_3"];
                this.columnOffset_d_3 = base.Columns["Offset_d_3"];
                this.columnBemerkung = base.Columns["Bemerkung"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid_neuromodule_kalibrierdaten = new global::System.Data.DataColumn("id_neuromodule_kalibrierdaten", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_neuromodule_kalibrierdaten);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnADResolution = new global::System.Data.DataColumn("ADResolution", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADResolution);
                this.columnuref = new global::System.Data.DataColumn("uref", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuref);
                this.columnOffset_hex_0 = new global::System.Data.DataColumn("Offset_hex_0", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_hex_0);
                this.columnSkalValue_k_0 = new global::System.Data.DataColumn("SkalValue_k_0", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkalValue_k_0);
                this.columnMidofRange_0 = new global::System.Data.DataColumn("MidofRange_0", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidofRange_0);
                this.columnOffset_d_0 = new global::System.Data.DataColumn("Offset_d_0", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_d_0);
                this.columnOffset_hex_1 = new global::System.Data.DataColumn("Offset_hex_1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_hex_1);
                this.columnSkalValue_k_1 = new global::System.Data.DataColumn("SkalValue_k_1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkalValue_k_1);
                this.columnMidofRange_1 = new global::System.Data.DataColumn("MidofRange_1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidofRange_1);
                this.columnOffset_d_1 = new global::System.Data.DataColumn("Offset_d_1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_d_1);
                this.columnOffset_hex_2 = new global::System.Data.DataColumn("Offset_hex_2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_hex_2);
                this.columnSkalValue_k_2 = new global::System.Data.DataColumn("SkalValue_k_2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkalValue_k_2);
                this.columnMidofRange_2 = new global::System.Data.DataColumn("MidofRange_2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidofRange_2);
                this.columnOffset_d_2 = new global::System.Data.DataColumn("Offset_d_2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_d_2);
                this.columnOffset_hex_3 = new global::System.Data.DataColumn("Offset_hex_3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_hex_3);
                this.columnSkalValue_k_3 = new global::System.Data.DataColumn("SkalValue_k_3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkalValue_k_3);
                this.columnMidofRange_3 = new global::System.Data.DataColumn("MidofRange_3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidofRange_3);
                this.columnOffset_d_3 = new global::System.Data.DataColumn("Offset_d_3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset_d_3);
                this.columnBemerkung = new global::System.Data.DataColumn("Bemerkung", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBemerkung);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_neuromodule_kalibrierdaten}, false));
                this.columnid_neuromodule_kalibrierdaten.AllowDBNull = false;
                this.columnid_neuromodule_kalibrierdaten.Unique = true;
                this.columnSerialNumber.AllowDBNull = false;
                this.columnSerialNumber.MaxLength = 255;
                this.columnBemerkung.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow NewNeuromodule_KalibrierdatenRow() {
                return ((Neuromodule_KalibrierdatenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Neuromodule_KalibrierdatenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Neuromodule_KalibrierdatenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Neuromodule_KalibrierdatenRowChanged != null)) {
                    this.Neuromodule_KalibrierdatenRowChanged(this, new Neuromodule_KalibrierdatenRowChangeEvent(((Neuromodule_KalibrierdatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Neuromodule_KalibrierdatenRowChanging != null)) {
                    this.Neuromodule_KalibrierdatenRowChanging(this, new Neuromodule_KalibrierdatenRowChangeEvent(((Neuromodule_KalibrierdatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Neuromodule_KalibrierdatenRowDeleted != null)) {
                    this.Neuromodule_KalibrierdatenRowDeleted(this, new Neuromodule_KalibrierdatenRowChangeEvent(((Neuromodule_KalibrierdatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Neuromodule_KalibrierdatenRowDeleting != null)) {
                    this.Neuromodule_KalibrierdatenRowDeleting(this, new Neuromodule_KalibrierdatenRowChangeEvent(((Neuromodule_KalibrierdatenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveNeuromodule_KalibrierdatenRow(Neuromodule_KalibrierdatenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsManufacturing ds = new dsManufacturing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Neuromodule_KalibrierdatenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NeurodevicesRow : global::System.Data.DataRow {
            
            private NeurodevicesDataTable tableNeurodevices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal NeurodevicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNeurodevices = ((NeurodevicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SerialNumber {
                get {
                    return ((string)(this[this.tableNeurodevices.SerialNumberColumn]));
                }
                set {
                    this[this.tableNeurodevices.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Typ {
                get {
                    try {
                        return ((string)(this[this.tableNeurodevices.TypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Typ\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.TypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime Programmierdatum {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNeurodevices.ProgrammierdatumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Programmierdatum\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.ProgrammierdatumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime Testdatum {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNeurodevices.TestdatumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Testdatum\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.TestdatumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TestOK {
                get {
                    try {
                        return ((string)(this[this.tableNeurodevices.TestOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestOK\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.TestOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableNeurodevices.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Version\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Hex_File_geflashed {
                get {
                    try {
                        return ((string)(this[this.tableNeurodevices.Hex_File_geflashedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hex_File_geflashed\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.Hex_File_geflashedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Test_Kabel {
                get {
                    return ((bool)(this[this.tableNeurodevices.Test_KabelColumn]));
                }
                set {
                    this[this.tableNeurodevices.Test_KabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Test_Funk {
                get {
                    return ((bool)(this[this.tableNeurodevices.Test_FunkColumn]));
                }
                set {
                    this[this.tableNeurodevices.Test_FunkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Test_Details {
                get {
                    try {
                        return ((string)(this[this.tableNeurodevices.Test_DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Test_Details\' in table \'Neurodevices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeurodevices.Test_DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTypNull() {
                return this.IsNull(this.tableNeurodevices.TypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTypNull() {
                this[this.tableNeurodevices.TypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProgrammierdatumNull() {
                return this.IsNull(this.tableNeurodevices.ProgrammierdatumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProgrammierdatumNull() {
                this[this.tableNeurodevices.ProgrammierdatumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTestdatumNull() {
                return this.IsNull(this.tableNeurodevices.TestdatumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTestdatumNull() {
                this[this.tableNeurodevices.TestdatumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTestOKNull() {
                return this.IsNull(this.tableNeurodevices.TestOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTestOKNull() {
                this[this.tableNeurodevices.TestOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsVersionNull() {
                return this.IsNull(this.tableNeurodevices.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetVersionNull() {
                this[this.tableNeurodevices.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsHex_File_geflashedNull() {
                return this.IsNull(this.tableNeurodevices.Hex_File_geflashedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetHex_File_geflashedNull() {
                this[this.tableNeurodevices.Hex_File_geflashedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTest_DetailsNull() {
                return this.IsNull(this.tableNeurodevices.Test_DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTest_DetailsNull() {
                this[this.tableNeurodevices.Test_DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow[] GetNeuromodule_KalibrierdatenRows() {
                if ((this.Table.ChildRelations["FK_Neurodevices_Neuromodule_Kalibrierdaten"] == null)) {
                    return new Neuromodule_KalibrierdatenRow[0];
                }
                else {
                    return ((Neuromodule_KalibrierdatenRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Neurodevices_Neuromodule_Kalibrierdaten"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow[] GetNeuromodule_DatenRows() {
                if ((this.Table.ChildRelations["FK_Neurodevices_Neuromodule_Daten"] == null)) {
                    return new Neuromodule_DatenRow[0];
                }
                else {
                    return ((Neuromodule_DatenRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Neurodevices_Neuromodule_Daten"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow[] GetAmplitudengainRows() {
                if ((this.Table.ChildRelations["FK_Neurodevices_Amplitudengain"] == null)) {
                    return new AmplitudengainRow[0];
                }
                else {
                    return ((AmplitudengainRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Neurodevices_Amplitudengain"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AmplitudengainRow : global::System.Data.DataRow {
            
            private AmplitudengainDataTable tableAmplitudengain;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AmplitudengainRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAmplitudengain = ((AmplitudengainDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid id_amplitudengain {
                get {
                    return ((global::System.Guid)(this[this.tableAmplitudengain.id_amplitudengainColumn]));
                }
                set {
                    this[this.tableAmplitudengain.id_amplitudengainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SerialNumber {
                get {
                    return ((string)(this[this.tableAmplitudengain.SerialNumberColumn]));
                }
                set {
                    this[this.tableAmplitudengain.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid id_neuromodule_kalibrierdaten {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableAmplitudengain.id_neuromodule_kalibrierdatenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_neuromodule_kalibrierdaten\' in table \'Amplitudengain\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.id_neuromodule_kalibrierdatenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double f {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.fColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.fColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Uineff {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.UineffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Uineff\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.UineffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double U0eff {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.U0effColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'U0eff\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.U0effColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double v0ist {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.v0istColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'v0ist\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.v0istColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double v0soll {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.v0sollColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'v0soll\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.v0sollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Tolerance {
                get {
                    try {
                        return ((double)(this[this.tableAmplitudengain.ToleranceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tolerance\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.ToleranceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOK {
                get {
                    return ((bool)(this[this.tableAmplitudengain.IsOKColumn]));
                }
                set {
                    this[this.tableAmplitudengain.IsOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableAmplitudengain.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'Amplitudengain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmplitudengain.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow Neuromodule_KalibrierdatenRow {
                get {
                    return ((Neuromodule_KalibrierdatenRow)(this.GetParentRow(this.Table.ParentRelations["FK_Neuromodule_Kalibrierdaten_Amplitudengain"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Neuromodule_Kalibrierdaten_Amplitudengain"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow NeurodevicesRow {
                get {
                    return ((NeurodevicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Neurodevices_Amplitudengain"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Neurodevices_Amplitudengain"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Isid_neuromodule_kalibrierdatenNull() {
                return this.IsNull(this.tableAmplitudengain.id_neuromodule_kalibrierdatenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Setid_neuromodule_kalibrierdatenNull() {
                this[this.tableAmplitudengain.id_neuromodule_kalibrierdatenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsfNull() {
                return this.IsNull(this.tableAmplitudengain.fColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetfNull() {
                this[this.tableAmplitudengain.fColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUineffNull() {
                return this.IsNull(this.tableAmplitudengain.UineffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUineffNull() {
                this[this.tableAmplitudengain.UineffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsU0effNull() {
                return this.IsNull(this.tableAmplitudengain.U0effColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetU0effNull() {
                this[this.tableAmplitudengain.U0effColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Isv0istNull() {
                return this.IsNull(this.tableAmplitudengain.v0istColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Setv0istNull() {
                this[this.tableAmplitudengain.v0istColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Isv0sollNull() {
                return this.IsNull(this.tableAmplitudengain.v0sollColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Setv0sollNull() {
                this[this.tableAmplitudengain.v0sollColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsToleranceNull() {
                return this.IsNull(this.tableAmplitudengain.ToleranceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetToleranceNull() {
                this[this.tableAmplitudengain.ToleranceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCommentNull() {
                return this.IsNull(this.tableAmplitudengain.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCommentNull() {
                this[this.tableAmplitudengain.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Neuromodule_DatenRow : global::System.Data.DataRow {
            
            private Neuromodule_DatenDataTable tableNeuromodule_Daten;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Neuromodule_DatenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNeuromodule_Daten = ((Neuromodule_DatenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid id_neuromodule_daten {
                get {
                    return ((global::System.Guid)(this[this.tableNeuromodule_Daten.id_neuromodule_datenColumn]));
                }
                set {
                    this[this.tableNeuromodule_Daten.id_neuromodule_datenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid id_neuromodule_kalibrierdaten {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_neuromodule_kalibrierdaten\' in table \'Neuromodule_Daten\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SerialNumber {
                get {
                    return ((string)(this[this.tableNeuromodule_Daten.SerialNumberColumn]));
                }
                set {
                    this[this.tableNeuromodule_Daten.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime Testdatum {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNeuromodule_Daten.TestdatumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Testdatum\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.TestdatumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Ueffin_V {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Ueffin_VColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ueffin_V\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Ueffin_VColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Uoffin_V {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Uoffin_VColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Uoffin_V\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Uoffin_VColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Ueffout_V {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Ueffout_VColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ueffout_V\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Ueffout_VColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Umeanout_V {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Umeanout_VColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Umeanout_V\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Umeanout_VColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Uglmittelwert_V {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Uglmittelwert_VColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Uglmittelwert_V\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Uglmittelwert_VColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double f {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.fColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.fColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SCL1 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.SCL1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SCL1\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.SCL1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SCL2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.SCL2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SCL2\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.SCL2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SCL3 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.SCL3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SCL3\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.SCL3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Temp1 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Temp1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp1\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Temp1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Temp2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Temp2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp2\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Temp2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Temp3 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Temp3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp3\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Temp3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Temp3ref {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Temp3refColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp3ref\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Temp3refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Multi_Pulsfrequenz {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.Multi_PulsfrequenzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multi_Pulsfrequenz\' in table \'Neuromodule_Daten\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.Multi_PulsfrequenzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double EEGTheta_V2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.EEGTheta_V2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EEGTheta_V2\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.EEGTheta_V2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double EEGAlpha_V2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.EEGAlpha_V2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EEGAlpha_V2\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.EEGAlpha_V2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double EEGBeta_V2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.EEGBeta_V2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EEGBeta_V2\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.EEGBeta_V2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Atemfrequenz {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.AtemfrequenzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Atemfrequenz\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.AtemfrequenzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double EMG_GleitenderMW {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.EMG_GleitenderMWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMG_GleitenderMW\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.EMG_GleitenderMWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Bemerkung {
                get {
                    try {
                        return ((string)(this[this.tableNeuromodule_Daten.BemerkungColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bemerkung\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.BemerkungColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double ECG_BPM {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Daten.ECG_BPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECG_BPM\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.ECG_BPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ECG_Lib_File_Name {
                get {
                    try {
                        return ((string)(this[this.tableNeuromodule_Daten.ECG_Lib_File_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECG_Lib_File_Name\' in table \'Neuromodule_Daten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Daten.ECG_Lib_File_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow Neuromodule_KalibrierdatenRow {
                get {
                    return ((Neuromodule_KalibrierdatenRow)(this.GetParentRow(this.Table.ParentRelations["FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow NeurodevicesRow {
                get {
                    return ((NeurodevicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Neurodevices_Neuromodule_Daten"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Neurodevices_Neuromodule_Daten"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Isid_neuromodule_kalibrierdatenNull() {
                return this.IsNull(this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Setid_neuromodule_kalibrierdatenNull() {
                this[this.tableNeuromodule_Daten.id_neuromodule_kalibrierdatenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTestdatumNull() {
                return this.IsNull(this.tableNeuromodule_Daten.TestdatumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTestdatumNull() {
                this[this.tableNeuromodule_Daten.TestdatumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUeffin_VNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Ueffin_VColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUeffin_VNull() {
                this[this.tableNeuromodule_Daten.Ueffin_VColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUoffin_VNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Uoffin_VColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUoffin_VNull() {
                this[this.tableNeuromodule_Daten.Uoffin_VColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUeffout_VNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Ueffout_VColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUeffout_VNull() {
                this[this.tableNeuromodule_Daten.Ueffout_VColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUmeanout_VNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Umeanout_VColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUmeanout_VNull() {
                this[this.tableNeuromodule_Daten.Umeanout_VColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUglmittelwert_VNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Uglmittelwert_VColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUglmittelwert_VNull() {
                this[this.tableNeuromodule_Daten.Uglmittelwert_VColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsfNull() {
                return this.IsNull(this.tableNeuromodule_Daten.fColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetfNull() {
                this[this.tableNeuromodule_Daten.fColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSCL1Null() {
                return this.IsNull(this.tableNeuromodule_Daten.SCL1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSCL1Null() {
                this[this.tableNeuromodule_Daten.SCL1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSCL2Null() {
                return this.IsNull(this.tableNeuromodule_Daten.SCL2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSCL2Null() {
                this[this.tableNeuromodule_Daten.SCL2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSCL3Null() {
                return this.IsNull(this.tableNeuromodule_Daten.SCL3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSCL3Null() {
                this[this.tableNeuromodule_Daten.SCL3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTemp1Null() {
                return this.IsNull(this.tableNeuromodule_Daten.Temp1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTemp1Null() {
                this[this.tableNeuromodule_Daten.Temp1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTemp2Null() {
                return this.IsNull(this.tableNeuromodule_Daten.Temp2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTemp2Null() {
                this[this.tableNeuromodule_Daten.Temp2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTemp3Null() {
                return this.IsNull(this.tableNeuromodule_Daten.Temp3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTemp3Null() {
                this[this.tableNeuromodule_Daten.Temp3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTemp3refNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Temp3refColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTemp3refNull() {
                this[this.tableNeuromodule_Daten.Temp3refColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMulti_PulsfrequenzNull() {
                return this.IsNull(this.tableNeuromodule_Daten.Multi_PulsfrequenzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMulti_PulsfrequenzNull() {
                this[this.tableNeuromodule_Daten.Multi_PulsfrequenzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEEGTheta_V2Null() {
                return this.IsNull(this.tableNeuromodule_Daten.EEGTheta_V2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEEGTheta_V2Null() {
                this[this.tableNeuromodule_Daten.EEGTheta_V2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEEGAlpha_V2Null() {
                return this.IsNull(this.tableNeuromodule_Daten.EEGAlpha_V2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEEGAlpha_V2Null() {
                this[this.tableNeuromodule_Daten.EEGAlpha_V2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEEGBeta_V2Null() {
                return this.IsNull(this.tableNeuromodule_Daten.EEGBeta_V2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEEGBeta_V2Null() {
                this[this.tableNeuromodule_Daten.EEGBeta_V2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAtemfrequenzNull() {
                return this.IsNull(this.tableNeuromodule_Daten.AtemfrequenzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAtemfrequenzNull() {
                this[this.tableNeuromodule_Daten.AtemfrequenzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEMG_GleitenderMWNull() {
                return this.IsNull(this.tableNeuromodule_Daten.EMG_GleitenderMWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEMG_GleitenderMWNull() {
                this[this.tableNeuromodule_Daten.EMG_GleitenderMWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBemerkungNull() {
                return this.IsNull(this.tableNeuromodule_Daten.BemerkungColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBemerkungNull() {
                this[this.tableNeuromodule_Daten.BemerkungColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsECG_BPMNull() {
                return this.IsNull(this.tableNeuromodule_Daten.ECG_BPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetECG_BPMNull() {
                this[this.tableNeuromodule_Daten.ECG_BPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsECG_Lib_File_NameNull() {
                return this.IsNull(this.tableNeuromodule_Daten.ECG_Lib_File_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetECG_Lib_File_NameNull() {
                this[this.tableNeuromodule_Daten.ECG_Lib_File_NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Neuromodule_KalibrierdatenRow : global::System.Data.DataRow {
            
            private Neuromodule_KalibrierdatenDataTable tableNeuromodule_Kalibrierdaten;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Neuromodule_KalibrierdatenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNeuromodule_Kalibrierdaten = ((Neuromodule_KalibrierdatenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid id_neuromodule_kalibrierdaten {
                get {
                    return ((global::System.Guid)(this[this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn]));
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.id_neuromodule_kalibrierdatenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SerialNumber {
                get {
                    return ((string)(this[this.tableNeuromodule_Kalibrierdaten.SerialNumberColumn]));
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short ADResolution {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.ADResolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADResolution\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.ADResolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double uref {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.urefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uref\' in table \'Neuromodule_Kalibrierdaten\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.urefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short Offset_hex_0 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_hex_0\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SkalValue_k_0 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkalValue_k_0\' in table \'Neuromodule_Kalibrierdaten\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short MidofRange_0 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.MidofRange_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidofRange_0\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.MidofRange_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Offset_d_0 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.Offset_d_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_d_0\' in table \'Neuromodule_Kalibrierdaten\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_d_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short Offset_hex_1 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_hex_1\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SkalValue_k_1 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkalValue_k_1\' in table \'Neuromodule_Kalibrierdaten\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short MidofRange_1 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.MidofRange_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidofRange_1\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.MidofRange_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Offset_d_1 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.Offset_d_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_d_1\' in table \'Neuromodule_Kalibrierdaten\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_d_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short Offset_hex_2 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_hex_2\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SkalValue_k_2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkalValue_k_2\' in table \'Neuromodule_Kalibrierdaten\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short MidofRange_2 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.MidofRange_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidofRange_2\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.MidofRange_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Offset_d_2 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.Offset_d_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_d_2\' in table \'Neuromodule_Kalibrierdaten\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_d_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short Offset_hex_3 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_hex_3\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double SkalValue_k_3 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkalValue_k_3\' in table \'Neuromodule_Kalibrierdaten\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short MidofRange_3 {
                get {
                    try {
                        return ((short)(this[this.tableNeuromodule_Kalibrierdaten.MidofRange_3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MidofRange_3\' in table \'Neuromodule_Kalibrierdaten\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.MidofRange_3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Offset_d_3 {
                get {
                    try {
                        return ((double)(this[this.tableNeuromodule_Kalibrierdaten.Offset_d_3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset_d_3\' in table \'Neuromodule_Kalibrierdaten\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.Offset_d_3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Bemerkung {
                get {
                    try {
                        return ((string)(this[this.tableNeuromodule_Kalibrierdaten.BemerkungColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bemerkung\' in table \'Neuromodule_Kalibrierdaten\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNeuromodule_Kalibrierdaten.BemerkungColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow NeurodevicesRow {
                get {
                    return ((NeurodevicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Neurodevices_Neuromodule_Kalibrierdaten"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Neurodevices_Neuromodule_Kalibrierdaten"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsADResolutionNull() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.ADResolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetADResolutionNull() {
                this[this.tableNeuromodule_Kalibrierdaten.ADResolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsurefNull() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.urefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SeturefNull() {
                this[this.tableNeuromodule_Kalibrierdaten.urefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_hex_0Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_hex_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_hex_0Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSkalValue_k_0Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.SkalValue_k_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSkalValue_k_0Null() {
                this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMidofRange_0Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.MidofRange_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMidofRange_0Null() {
                this[this.tableNeuromodule_Kalibrierdaten.MidofRange_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_d_0Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_d_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_d_0Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_d_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_hex_1Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_hex_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_hex_1Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSkalValue_k_1Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.SkalValue_k_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSkalValue_k_1Null() {
                this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMidofRange_1Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.MidofRange_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMidofRange_1Null() {
                this[this.tableNeuromodule_Kalibrierdaten.MidofRange_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_d_1Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_d_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_d_1Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_d_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_hex_2Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_hex_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_hex_2Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSkalValue_k_2Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.SkalValue_k_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSkalValue_k_2Null() {
                this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMidofRange_2Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.MidofRange_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMidofRange_2Null() {
                this[this.tableNeuromodule_Kalibrierdaten.MidofRange_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_d_2Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_d_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_d_2Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_d_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_hex_3Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_hex_3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_hex_3Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_hex_3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSkalValue_k_3Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.SkalValue_k_3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSkalValue_k_3Null() {
                this[this.tableNeuromodule_Kalibrierdaten.SkalValue_k_3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMidofRange_3Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.MidofRange_3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMidofRange_3Null() {
                this[this.tableNeuromodule_Kalibrierdaten.MidofRange_3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOffset_d_3Null() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.Offset_d_3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOffset_d_3Null() {
                this[this.tableNeuromodule_Kalibrierdaten.Offset_d_3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBemerkungNull() {
                return this.IsNull(this.tableNeuromodule_Kalibrierdaten.BemerkungColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBemerkungNull() {
                this[this.tableNeuromodule_Kalibrierdaten.BemerkungColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow[] GetNeuromodule_DatenRows() {
                if ((this.Table.ChildRelations["FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten"] == null)) {
                    return new Neuromodule_DatenRow[0];
                }
                else {
                    return ((Neuromodule_DatenRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Neuromodule_Kalibrierdaten_Neuromodule_Daten"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow[] GetAmplitudengainRows() {
                if ((this.Table.ChildRelations["FK_Neuromodule_Kalibrierdaten_Amplitudengain"] == null)) {
                    return new AmplitudengainRow[0];
                }
                else {
                    return ((AmplitudengainRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Neuromodule_Kalibrierdaten_Amplitudengain"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class NeurodevicesRowChangeEvent : global::System.EventArgs {
            
            private NeurodevicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRowChangeEvent(NeurodevicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NeurodevicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AmplitudengainRowChangeEvent : global::System.EventArgs {
            
            private AmplitudengainRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRowChangeEvent(AmplitudengainRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AmplitudengainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Neuromodule_DatenRowChangeEvent : global::System.EventArgs {
            
            private Neuromodule_DatenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRowChangeEvent(Neuromodule_DatenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_DatenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Neuromodule_KalibrierdatenRowChangeEvent : global::System.EventArgs {
            
            private Neuromodule_KalibrierdatenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRowChangeEvent(Neuromodule_KalibrierdatenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Neuromodule_KalibrierdatenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Insight_Manufacturing5_net8.Properties.DataSources.dsManufacturingTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NeurodevicesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public NeurodevicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Neurodevices";
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("Typ", "Typ");
            tableMapping.ColumnMappings.Add("Programmierdatum", "Programmierdatum");
            tableMapping.ColumnMappings.Add("Testdatum", "Testdatum");
            tableMapping.ColumnMappings.Add("TestOK", "TestOK");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("Hex_File_geflashed", "Hex_File_geflashed");
            tableMapping.ColumnMappings.Add("Test_Kabel", "Test_Kabel");
            tableMapping.ColumnMappings.Add("Test_Funk", "Test_Funk");
            tableMapping.ColumnMappings.Add("Test_Details", "Test_Details");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Neurodevices] ([SerialNumber], [Typ], [Programmierdatum], [Testdatum], [TestOK], [Version], [Hex_File_geflashed], [Test_Kabel], [Test_Funk], [Test_Details]) VALUES (@SerialNumber, @Typ, @Programmierdatum, @Testdatum, @TestOK, @Version, @Hex_File_geflashed, @Test_Kabel, @Test_Funk, @Test_Details)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Typ", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Programmierdatum", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Programmierdatum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Testdatum", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Testdatum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestOK", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestOK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Version", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Version", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Hex_File_geflashed", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hex_File_geflashed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Test_Kabel", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Test_Kabel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Test_Funk", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Test_Funk", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Test_Details", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Test_Details", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Insight60;Integrated Security=" +
                "True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SerialNumber, Typ, Programmierdatum, Testdatum, TestOK, Version, Hex_File_" +
                "geflashed, Test_Kabel, Test_Funk, Test_Details FROM dbo.Neurodevices";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Hex_File_geflashed, Programmierdatum, SerialNumber, TestOK, Test_Details, " +
                "Test_Funk, Test_Kabel, Testdatum, Typ, Version FROM Neurodevices WHERE (SerialNu" +
                "mber = @SerialNumber)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Hex_File_geflashed, Programmierdatum, SerialNumber, TestOK, Test_Details, " +
                "Test_Funk, Test_Kabel, Testdatum, Typ, Version FROM Neurodevices WHERE (Typ = @T" +
                "ype)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsManufacturing.NeurodevicesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsManufacturing.NeurodevicesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsManufacturing.NeurodevicesDataTable dataTable = new dsManufacturing.NeurodevicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_SerialNumber(dsManufacturing.NeurodevicesDataTable dataTable, string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(SerialNumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual dsManufacturing.NeurodevicesDataTable GetDataBy_SerialNumber(string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(SerialNumber));
            }
            dsManufacturing.NeurodevicesDataTable dataTable = new dsManufacturing.NeurodevicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_Typ(dsManufacturing.NeurodevicesDataTable dataTable, string Type) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Type == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Type));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing.NeurodevicesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing dataSet) {
            return this.Adapter.Update(dataSet, "Neurodevices");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SerialNumber, string Typ, global::System.Nullable<global::System.DateTime> Programmierdatum, global::System.Nullable<global::System.DateTime> Testdatum, string TestOK, string Version, string Hex_File_geflashed, bool Test_Kabel, bool Test_Funk, string Test_Details) {
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SerialNumber));
            }
            if ((Typ == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Typ));
            }
            if ((Programmierdatum.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Programmierdatum.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Testdatum.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Testdatum.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TestOK == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TestOK));
            }
            if ((Version == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Version));
            }
            if ((Hex_File_geflashed == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Hex_File_geflashed));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Test_Kabel));
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Test_Funk));
            if ((Test_Details == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Test_Details));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AmplitudengainTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AmplitudengainTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Amplitudengain";
            tableMapping.ColumnMappings.Add("id_amplitudengain", "id_amplitudengain");
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("id_neuromodule_kalibrierdaten", "id_neuromodule_kalibrierdaten");
            tableMapping.ColumnMappings.Add("f", "f");
            tableMapping.ColumnMappings.Add("Uineff", "Uineff");
            tableMapping.ColumnMappings.Add("U0eff", "U0eff");
            tableMapping.ColumnMappings.Add("v0ist", "v0ist");
            tableMapping.ColumnMappings.Add("v0soll", "v0soll");
            tableMapping.ColumnMappings.Add("Tolerance", "Tolerance");
            tableMapping.ColumnMappings.Add("IsOK", "IsOK");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Amplitudengain] ([id_amplitudengain], [SerialNumber], [id_neuromodule_kalibrierdaten], [f], [Uineff], [U0eff], [v0ist], [v0soll], [Tolerance], [IsOK], [Comment]) VALUES (@id_amplitudengain, @SerialNumber, @id_neuromodule_kalibrierdaten, @f, @Uineff, @U0eff, @v0ist, @v0soll, @Tolerance, @IsOK, @Comment)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_amplitudengain", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_amplitudengain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_neuromodule_kalibrierdaten", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_neuromodule_kalibrierdaten", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uineff", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Uineff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@U0eff", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "U0eff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@v0ist", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "v0ist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@v0soll", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "v0soll", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tolerance", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tolerance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOK", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Insight60;Integrated Security=" +
                "True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_amplitudengain, SerialNumber, id_neuromodule_kalibrierdaten, f, Uineff," +
                " U0eff, v0ist, v0soll, Tolerance, IsOK, Comment FROM dbo.Amplitudengain";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsManufacturing.AmplitudengainDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsManufacturing.AmplitudengainDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsManufacturing.AmplitudengainDataTable dataTable = new dsManufacturing.AmplitudengainDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing.AmplitudengainDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing dataSet) {
            return this.Adapter.Update(dataSet, "Amplitudengain");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id_amplitudengain, string SerialNumber, global::System.Nullable<global::System.Guid> id_neuromodule_kalibrierdaten, global::System.Nullable<double> f, global::System.Nullable<double> Uineff, global::System.Nullable<double> U0eff, global::System.Nullable<double> v0ist, global::System.Nullable<double> v0soll, global::System.Nullable<double> Tolerance, bool IsOK, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id_amplitudengain));
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SerialNumber));
            }
            if ((id_neuromodule_kalibrierdaten.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(id_neuromodule_kalibrierdaten.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((f.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(f.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Uineff.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Uineff.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((U0eff.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(U0eff.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((v0ist.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(v0ist.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((v0soll.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(v0soll.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Tolerance.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Tolerance.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(IsOK));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Neuromodule_DatenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Neuromodule_DatenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Neuromodule_Daten";
            tableMapping.ColumnMappings.Add("id_neuromodule_daten", "id_neuromodule_daten");
            tableMapping.ColumnMappings.Add("id_neuromodule_kalibrierdaten", "id_neuromodule_kalibrierdaten");
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("Testdatum", "Testdatum");
            tableMapping.ColumnMappings.Add("Ueffin_V", "Ueffin_V");
            tableMapping.ColumnMappings.Add("Uoffin_V", "Uoffin_V");
            tableMapping.ColumnMappings.Add("Ueffout_V", "Ueffout_V");
            tableMapping.ColumnMappings.Add("Umeanout_V", "Umeanout_V");
            tableMapping.ColumnMappings.Add("Uglmittelwert_V", "Uglmittelwert_V");
            tableMapping.ColumnMappings.Add("f", "f");
            tableMapping.ColumnMappings.Add("SCL1", "SCL1");
            tableMapping.ColumnMappings.Add("SCL2", "SCL2");
            tableMapping.ColumnMappings.Add("SCL3", "SCL3");
            tableMapping.ColumnMappings.Add("Temp1", "Temp1");
            tableMapping.ColumnMappings.Add("Temp2", "Temp2");
            tableMapping.ColumnMappings.Add("Temp3", "Temp3");
            tableMapping.ColumnMappings.Add("Temp3ref", "Temp3ref");
            tableMapping.ColumnMappings.Add("Multi_Pulsfrequenz", "Multi_Pulsfrequenz");
            tableMapping.ColumnMappings.Add("EEGTheta_V2", "EEGTheta_V2");
            tableMapping.ColumnMappings.Add("EEGAlpha_V2", "EEGAlpha_V2");
            tableMapping.ColumnMappings.Add("EEGBeta_V2", "EEGBeta_V2");
            tableMapping.ColumnMappings.Add("Atemfrequenz", "Atemfrequenz");
            tableMapping.ColumnMappings.Add("EMG_GleitenderMW", "EMG_GleitenderMW");
            tableMapping.ColumnMappings.Add("Bemerkung", "Bemerkung");
            tableMapping.ColumnMappings.Add("ECG_BPM", "ECG_BPM");
            tableMapping.ColumnMappings.Add("ECG_Lib_File_Name", "ECG_Lib_File_Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Neuromodule_Daten] ([id_neuromodule_daten], [id_neuromodule_kalibrierdaten], [SerialNumber], [Testdatum], [Ueffin_V], [Uoffin_V], [Ueffout_V], [Umeanout_V], [Uglmittelwert_V], [f], [SCL1], [SCL2], [SCL3], [Temp1], [Temp2], [Temp3], [Temp3ref], [Multi_Pulsfrequenz], [EEGTheta_V2], [EEGAlpha_V2], [EEGBeta_V2], [Atemfrequenz], [EMG_GleitenderMW], [Bemerkung], [ECG_BPM], [ECG_Lib_File_Name]) VALUES (@id_neuromodule_daten, @id_neuromodule_kalibrierdaten, @SerialNumber, @Testdatum, @Ueffin_V, @Uoffin_V, @Ueffout_V, @Umeanout_V, @Uglmittelwert_V, @f, @SCL1, @SCL2, @SCL3, @Temp1, @Temp2, @Temp3, @Temp3ref, @Multi_Pulsfrequenz, @EEGTheta_V2, @EEGAlpha_V2, @EEGBeta_V2, @Atemfrequenz, @EMG_GleitenderMW, @Bemerkung, @ECG_BPM, @ECG_Lib_File_Name)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_neuromodule_daten", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_neuromodule_daten", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_neuromodule_kalibrierdaten", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_neuromodule_kalibrierdaten", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Testdatum", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Testdatum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ueffin_V", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ueffin_V", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uoffin_V", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Uoffin_V", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ueffout_V", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ueffout_V", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Umeanout_V", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Umeanout_V", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uglmittelwert_V", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Uglmittelwert_V", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SCL1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SCL1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SCL2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SCL2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SCL3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SCL3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temp1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temp1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temp2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temp2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temp3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temp3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temp3ref", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temp3ref", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Multi_Pulsfrequenz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Multi_Pulsfrequenz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EEGTheta_V2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EEGTheta_V2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EEGAlpha_V2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EEGAlpha_V2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EEGBeta_V2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EEGBeta_V2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Atemfrequenz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Atemfrequenz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMG_GleitenderMW", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMG_GleitenderMW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bemerkung", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bemerkung", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECG_BPM", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECG_BPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECG_Lib_File_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECG_Lib_File_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Insight60;Integrated Security=" +
                "True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id_neuromodule_daten, id_neuromodule_kalibrierdaten, SerialNumber, Testdatum, Ueffin_V, Uoffin_V, Ueffout_V, Umeanout_V, Uglmittelwert_V, f, SCL1, SCL2, SCL3, Temp1, Temp2, Temp3, Temp3ref, Multi_Pulsfrequenz, EEGTheta_V2, EEGAlpha_V2, EEGBeta_V2, Atemfrequenz, EMG_GleitenderMW, Bemerkung, ECG_BPM, ECG_Lib_File_Name FROM dbo.Neuromodule_Daten";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT Atemfrequenz, Bemerkung, ECG_BPM, ECG_Lib_File_Name, EEGAlpha_V2, EEGBeta_V2, EEGTheta_V2, EMG_GleitenderMW, Multi_Pulsfrequenz, SCL1, SCL2, SCL3, SerialNumber, Temp1, Temp2, Temp3, Temp3ref, Testdatum, Ueffin_V, Ueffout_V, Uglmittelwert_V, Umeanout_V, Uoffin_V, f, id_neuromodule_daten, id_neuromodule_kalibrierdaten FROM Neuromodule_Daten WHERE (id_neuromodule_kalibrierdaten = @id_neuromodule_kalibrierdaten)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_neuromodule_kalibrierdaten", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "id_neuromodule_kalibrierdaten", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT Atemfrequenz, Bemerkung, ECG_BPM, ECG_Lib_File_Name, EEGAlpha_V2, EEGBeta_V2, EEGTheta_V2, EMG_GleitenderMW, Multi_Pulsfrequenz, SCL1, SCL2, SCL3, SerialNumber, Temp1, Temp2, Temp3, Temp3ref, Testdatum, Ueffin_V, Ueffout_V, Uglmittelwert_V, Umeanout_V, Uoffin_V, f, id_neuromodule_daten, id_neuromodule_kalibrierdaten FROM Neuromodule_Daten WHERE (SerialNumber = @Param1) ORDER BY Testdatum DESC";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Param1", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT Atemfrequenz, Bemerkung, ECG_BPM, ECG_Lib_File_Name, EEGAlpha_V2, EEGBeta_V2, EEGTheta_V2, EMG_GleitenderMW, Multi_Pulsfrequenz, SCL1, SCL2, SCL3, SerialNumber, Temp1, Temp2, Temp3, Temp3ref, Testdatum, Ueffin_V, Ueffout_V, Uglmittelwert_V, Umeanout_V, Uoffin_V, f, id_neuromodule_daten, id_neuromodule_kalibrierdaten FROM Neuromodule_Daten WHERE (SerialNumber = @SerialNumber) AND (Bemerkung = 'check') ORDER BY Testdatum DESC";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsManufacturing.Neuromodule_DatenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsManufacturing.Neuromodule_DatenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsManufacturing.Neuromodule_DatenDataTable dataTable = new dsManufacturing.Neuromodule_DatenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_id_neuromodule_kalibrierdaten(dsManufacturing.Neuromodule_DatenDataTable dataTable, global::System.Nullable<global::System.Guid> id_neuromodule_kalibrierdaten) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id_neuromodule_kalibrierdaten.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(id_neuromodule_kalibrierdaten.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_SerialNumber_Order_Desc_by_Date(dsManufacturing.Neuromodule_DatenDataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Param1 == null)) {
                throw new global::System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_SerialNumber_Order_Desc_by_Date_check(dsManufacturing.Neuromodule_DatenDataTable dataTable, string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(SerialNumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing.Neuromodule_DatenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing dataSet) {
            return this.Adapter.Update(dataSet, "Neuromodule_Daten");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid id_neuromodule_daten, 
                    global::System.Nullable<global::System.Guid> id_neuromodule_kalibrierdaten, 
                    string SerialNumber, 
                    global::System.Nullable<global::System.DateTime> Testdatum, 
                    global::System.Nullable<double> Ueffin_V, 
                    global::System.Nullable<double> Uoffin_V, 
                    global::System.Nullable<double> Ueffout_V, 
                    global::System.Nullable<double> Umeanout_V, 
                    global::System.Nullable<double> Uglmittelwert_V, 
                    global::System.Nullable<double> f, 
                    global::System.Nullable<double> SCL1, 
                    global::System.Nullable<double> SCL2, 
                    global::System.Nullable<double> SCL3, 
                    global::System.Nullable<double> Temp1, 
                    global::System.Nullable<double> Temp2, 
                    global::System.Nullable<double> Temp3, 
                    global::System.Nullable<double> Temp3ref, 
                    global::System.Nullable<double> Multi_Pulsfrequenz, 
                    global::System.Nullable<double> EEGTheta_V2, 
                    global::System.Nullable<double> EEGAlpha_V2, 
                    global::System.Nullable<double> EEGBeta_V2, 
                    global::System.Nullable<double> Atemfrequenz, 
                    global::System.Nullable<double> EMG_GleitenderMW, 
                    string Bemerkung, 
                    global::System.Nullable<double> ECG_BPM, 
                    string ECG_Lib_File_Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id_neuromodule_daten));
            if ((id_neuromodule_kalibrierdaten.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(id_neuromodule_kalibrierdaten.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SerialNumber));
            }
            if ((Testdatum.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Testdatum.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Ueffin_V.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Ueffin_V.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Uoffin_V.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Uoffin_V.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ueffout_V.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Ueffout_V.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Umeanout_V.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(Umeanout_V.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Uglmittelwert_V.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Uglmittelwert_V.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((f.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(f.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((SCL1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(SCL1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SCL2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(SCL2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((SCL3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(SCL3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Temp1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(Temp1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Temp2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(Temp2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Temp3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(Temp3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Temp3ref.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(Temp3ref.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Multi_Pulsfrequenz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(Multi_Pulsfrequenz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((EEGTheta_V2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(EEGTheta_V2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((EEGAlpha_V2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(EEGAlpha_V2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((EEGBeta_V2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(EEGBeta_V2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Atemfrequenz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(Atemfrequenz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((EMG_GleitenderMW.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(EMG_GleitenderMW.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Bemerkung == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Bemerkung));
            }
            if ((ECG_BPM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(ECG_BPM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ECG_Lib_File_Name == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(ECG_Lib_File_Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Neuromodule_KalibrierdatenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Neuromodule_KalibrierdatenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Neuromodule_Kalibrierdaten";
            tableMapping.ColumnMappings.Add("id_neuromodule_kalibrierdaten", "id_neuromodule_kalibrierdaten");
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("ADResolution", "ADResolution");
            tableMapping.ColumnMappings.Add("uref", "uref");
            tableMapping.ColumnMappings.Add("Offset_hex_0", "Offset_hex_0");
            tableMapping.ColumnMappings.Add("SkalValue_k_0", "SkalValue_k_0");
            tableMapping.ColumnMappings.Add("MidofRange_0", "MidofRange_0");
            tableMapping.ColumnMappings.Add("Offset_d_0", "Offset_d_0");
            tableMapping.ColumnMappings.Add("Offset_hex_1", "Offset_hex_1");
            tableMapping.ColumnMappings.Add("SkalValue_k_1", "SkalValue_k_1");
            tableMapping.ColumnMappings.Add("MidofRange_1", "MidofRange_1");
            tableMapping.ColumnMappings.Add("Offset_d_1", "Offset_d_1");
            tableMapping.ColumnMappings.Add("Offset_hex_2", "Offset_hex_2");
            tableMapping.ColumnMappings.Add("SkalValue_k_2", "SkalValue_k_2");
            tableMapping.ColumnMappings.Add("MidofRange_2", "MidofRange_2");
            tableMapping.ColumnMappings.Add("Offset_d_2", "Offset_d_2");
            tableMapping.ColumnMappings.Add("Offset_hex_3", "Offset_hex_3");
            tableMapping.ColumnMappings.Add("SkalValue_k_3", "SkalValue_k_3");
            tableMapping.ColumnMappings.Add("MidofRange_3", "MidofRange_3");
            tableMapping.ColumnMappings.Add("Offset_d_3", "Offset_d_3");
            tableMapping.ColumnMappings.Add("Bemerkung", "Bemerkung");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Neuromodule_Kalibrierdaten] ([id_neuromodule_kalibrierdaten], [SerialNumber], [ADResolution], [uref], [Offset_hex_0], [SkalValue_k_0], [MidofRange_0], [Offset_d_0], [Offset_hex_1], [SkalValue_k_1], [MidofRange_1], [Offset_d_1], [Offset_hex_2], [SkalValue_k_2], [MidofRange_2], [Offset_d_2], [Offset_hex_3], [SkalValue_k_3], [MidofRange_3], [Offset_d_3], [Bemerkung]) VALUES (@id_neuromodule_kalibrierdaten, @SerialNumber, @ADResolution, @uref, @Offset_hex_0, @SkalValue_k_0, @MidofRange_0, @Offset_d_0, @Offset_hex_1, @SkalValue_k_1, @MidofRange_1, @Offset_d_1, @Offset_hex_2, @SkalValue_k_2, @MidofRange_2, @Offset_d_2, @Offset_hex_3, @SkalValue_k_3, @MidofRange_3, @Offset_d_3, @Bemerkung)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_neuromodule_kalibrierdaten", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_neuromodule_kalibrierdaten", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADResolution", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADResolution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@uref", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "uref", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_hex_0", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_hex_0", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SkalValue_k_0", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SkalValue_k_0", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MidofRange_0", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MidofRange_0", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_d_0", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_d_0", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_hex_1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_hex_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SkalValue_k_1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SkalValue_k_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MidofRange_1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MidofRange_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_d_1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_d_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_hex_2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_hex_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SkalValue_k_2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SkalValue_k_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MidofRange_2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MidofRange_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_d_2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_d_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_hex_3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_hex_3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SkalValue_k_3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SkalValue_k_3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MidofRange_3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MidofRange_3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Offset_d_3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Offset_d_3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bemerkung", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bemerkung", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Insight60;Integrated Security=" +
                "True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id_neuromodule_kalibrierdaten, SerialNumber, ADResolution, uref, Offset_hex_0, SkalValue_k_0, MidofRange_0, Offset_d_0, Offset_hex_1, SkalValue_k_1, MidofRange_1, Offset_d_1, Offset_hex_2, SkalValue_k_2, MidofRange_2, Offset_d_2, Offset_hex_3, SkalValue_k_3, MidofRange_3, Offset_d_3, Bemerkung FROM dbo.Neuromodule_Kalibrierdaten";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT ADResolution, Bemerkung, MidofRange_0, MidofRange_1, MidofRange_2, MidofRange_3, Offset_d_0, Offset_d_1, Offset_d_2, Offset_d_3, Offset_hex_0, Offset_hex_1, Offset_hex_2, Offset_hex_3, SerialNumber, SkalValue_k_0, SkalValue_k_1, SkalValue_k_2, SkalValue_k_3, id_neuromodule_kalibrierdaten, uref FROM Neuromodule_Kalibrierdaten WHERE (SerialNumber = @SerialNumber)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SerialNumber", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsManufacturing.Neuromodule_KalibrierdatenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsManufacturing.Neuromodule_KalibrierdatenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsManufacturing.Neuromodule_KalibrierdatenDataTable dataTable = new dsManufacturing.Neuromodule_KalibrierdatenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_SerialNo(dsManufacturing.Neuromodule_KalibrierdatenDataTable dataTable, string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(SerialNumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing.Neuromodule_KalibrierdatenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsManufacturing dataSet) {
            return this.Adapter.Update(dataSet, "Neuromodule_Kalibrierdaten");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid id_neuromodule_kalibrierdaten, 
                    string SerialNumber, 
                    global::System.Nullable<short> ADResolution, 
                    global::System.Nullable<double> uref, 
                    global::System.Nullable<short> Offset_hex_0, 
                    global::System.Nullable<double> SkalValue_k_0, 
                    global::System.Nullable<short> MidofRange_0, 
                    global::System.Nullable<double> Offset_d_0, 
                    global::System.Nullable<short> Offset_hex_1, 
                    global::System.Nullable<double> SkalValue_k_1, 
                    global::System.Nullable<short> MidofRange_1, 
                    global::System.Nullable<double> Offset_d_1, 
                    global::System.Nullable<short> Offset_hex_2, 
                    global::System.Nullable<double> SkalValue_k_2, 
                    global::System.Nullable<short> MidofRange_2, 
                    global::System.Nullable<double> Offset_d_2, 
                    global::System.Nullable<short> Offset_hex_3, 
                    global::System.Nullable<double> SkalValue_k_3, 
                    global::System.Nullable<short> MidofRange_3, 
                    global::System.Nullable<double> Offset_d_3, 
                    string Bemerkung) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id_neuromodule_kalibrierdaten));
            if ((SerialNumber == null)) {
                throw new global::System.ArgumentNullException("SerialNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SerialNumber));
            }
            if ((ADResolution.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((short)(ADResolution.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((uref.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(uref.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Offset_hex_0.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((short)(Offset_hex_0.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((SkalValue_k_0.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(SkalValue_k_0.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((MidofRange_0.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((short)(MidofRange_0.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Offset_d_0.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(Offset_d_0.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Offset_hex_1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((short)(Offset_hex_1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((SkalValue_k_1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(SkalValue_k_1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((MidofRange_1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((short)(MidofRange_1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Offset_d_1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(Offset_d_1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Offset_hex_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((short)(Offset_hex_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((SkalValue_k_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(SkalValue_k_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((MidofRange_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((short)(MidofRange_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Offset_d_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(Offset_d_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Offset_hex_3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(Offset_hex_3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SkalValue_k_3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(SkalValue_k_3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((MidofRange_3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((short)(MidofRange_3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Offset_d_3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(Offset_d_3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Bemerkung == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Bemerkung));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private NeurodevicesTableAdapter _neurodevicesTableAdapter;
        
        private AmplitudengainTableAdapter _amplitudengainTableAdapter;
        
        private Neuromodule_DatenTableAdapter _neuromodule_DatenTableAdapter;
        
        private Neuromodule_KalibrierdatenTableAdapter _neuromodule_KalibrierdatenTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NeurodevicesTableAdapter NeurodevicesTableAdapter {
            get {
                return this._neurodevicesTableAdapter;
            }
            set {
                this._neurodevicesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AmplitudengainTableAdapter AmplitudengainTableAdapter {
            get {
                return this._amplitudengainTableAdapter;
            }
            set {
                this._amplitudengainTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Neuromodule_DatenTableAdapter Neuromodule_DatenTableAdapter {
            get {
                return this._neuromodule_DatenTableAdapter;
            }
            set {
                this._neuromodule_DatenTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Neuromodule_KalibrierdatenTableAdapter Neuromodule_KalibrierdatenTableAdapter {
            get {
                return this._neuromodule_KalibrierdatenTableAdapter;
            }
            set {
                this._neuromodule_KalibrierdatenTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._neurodevicesTableAdapter != null) 
                            && (this._neurodevicesTableAdapter.Connection != null))) {
                    return this._neurodevicesTableAdapter.Connection;
                }
                if (((this._amplitudengainTableAdapter != null) 
                            && (this._amplitudengainTableAdapter.Connection != null))) {
                    return this._amplitudengainTableAdapter.Connection;
                }
                if (((this._neuromodule_DatenTableAdapter != null) 
                            && (this._neuromodule_DatenTableAdapter.Connection != null))) {
                    return this._neuromodule_DatenTableAdapter.Connection;
                }
                if (((this._neuromodule_KalibrierdatenTableAdapter != null) 
                            && (this._neuromodule_KalibrierdatenTableAdapter.Connection != null))) {
                    return this._neuromodule_KalibrierdatenTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._neurodevicesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._amplitudengainTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._neuromodule_DatenTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(dsManufacturing dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._neurodevicesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Neurodevices.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._neurodevicesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Neuromodule_Kalibrierdaten.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._neuromodule_KalibrierdatenTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._amplitudengainTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Amplitudengain.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._amplitudengainTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._neuromodule_DatenTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Neuromodule_Daten.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._neuromodule_DatenTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(dsManufacturing dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._neurodevicesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Neurodevices.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._neurodevicesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Neuromodule_Kalibrierdaten.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._neuromodule_KalibrierdatenTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._amplitudengainTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Amplitudengain.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._amplitudengainTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._neuromodule_DatenTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Neuromodule_Daten.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._neuromodule_DatenTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(dsManufacturing dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._neuromodule_DatenTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Neuromodule_Daten.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._neuromodule_DatenTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._amplitudengainTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Amplitudengain.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._amplitudengainTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Neuromodule_Kalibrierdaten.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._neuromodule_KalibrierdatenTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._neurodevicesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Neurodevices.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._neurodevicesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(dsManufacturing dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._neurodevicesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._neurodevicesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._amplitudengainTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._amplitudengainTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._neuromodule_DatenTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._neuromodule_DatenTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._neuromodule_KalibrierdatenTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._neuromodule_KalibrierdatenTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._neurodevicesTableAdapter != null)) {
                    revertConnections.Add(this._neurodevicesTableAdapter, this._neurodevicesTableAdapter.Connection);
                    this._neurodevicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._neurodevicesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._neurodevicesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._neurodevicesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._neurodevicesTableAdapter.Adapter);
                    }
                }
                if ((this._amplitudengainTableAdapter != null)) {
                    revertConnections.Add(this._amplitudengainTableAdapter, this._amplitudengainTableAdapter.Connection);
                    this._amplitudengainTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._amplitudengainTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._amplitudengainTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._amplitudengainTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._amplitudengainTableAdapter.Adapter);
                    }
                }
                if ((this._neuromodule_DatenTableAdapter != null)) {
                    revertConnections.Add(this._neuromodule_DatenTableAdapter, this._neuromodule_DatenTableAdapter.Connection);
                    this._neuromodule_DatenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._neuromodule_DatenTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._neuromodule_DatenTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._neuromodule_DatenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._neuromodule_DatenTableAdapter.Adapter);
                    }
                }
                if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                    revertConnections.Add(this._neuromodule_KalibrierdatenTableAdapter, this._neuromodule_KalibrierdatenTableAdapter.Connection);
                    this._neuromodule_KalibrierdatenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._neuromodule_KalibrierdatenTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._neuromodule_KalibrierdatenTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._neuromodule_KalibrierdatenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._neuromodule_KalibrierdatenTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._neurodevicesTableAdapter != null)) {
                    this._neurodevicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._neurodevicesTableAdapter]));
                    this._neurodevicesTableAdapter.Transaction = null;
                }
                if ((this._amplitudengainTableAdapter != null)) {
                    this._amplitudengainTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._amplitudengainTableAdapter]));
                    this._amplitudengainTableAdapter.Transaction = null;
                }
                if ((this._neuromodule_DatenTableAdapter != null)) {
                    this._neuromodule_DatenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._neuromodule_DatenTableAdapter]));
                    this._neuromodule_DatenTableAdapter.Transaction = null;
                }
                if ((this._neuromodule_KalibrierdatenTableAdapter != null)) {
                    this._neuromodule_KalibrierdatenTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._neuromodule_KalibrierdatenTableAdapter]));
                    this._neuromodule_KalibrierdatenTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591